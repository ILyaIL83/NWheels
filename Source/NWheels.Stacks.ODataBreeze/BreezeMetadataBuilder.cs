using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using NWheels.DataObjects;
using NWheels.Extensions;

namespace NWheels.Stacks.ODataBreeze
{
    public class BreezeMetadataBuilder
    {
        private readonly ITypeMetadataCache _metadataCache;
        private readonly MetadataRoot _metadata;

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public BreezeMetadataBuilder(ITypeMetadataCache metadataCache)
        {
            _metadataCache = metadataCache;
            _metadata = new MetadataRoot {
                MetadataVersion = "1.0.5",
                LocalQueryComparisonOptions = "caseInsensitiveSQL",
                DataServices = new List<DataService>(),
                StructuralTypes = new List<StructuralType>(),
                ResourceEntityTypeMap = new Dictionary<string, string>()
            };
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public void AddDataService(string relativeUrlPath)
        {
            _metadata.DataServices.Add(new DataService {
                ServiceName = relativeUrlPath,
                HasServerMetadata = true,
                JsonResultsAdapter = "webApi_default",
                UseJsonp = false
            });
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public void AddEntity(Type contractType)
        {
            var typeMetadata = _metadataCache.GetTypeMetadata(contractType);

            var structuralType = new StructuralType {
                ShortName = contractType.Name.TrimLead("I").TrimTail("Entity"),
                Namespace = contractType.Namespace,
                IsComplexType = false,
                AutoGeneratedKeyType = "KeyGenerator",
                DataProperties = new List<DataProperty>(),
                NavigationProperties = new List<NavigationProperty>()
            };

            foreach ( var property in typeMetadata.Properties.Where(p => p.Kind == PropertyKind.Scalar) )
            {
                AddDataProperty(typeMetadata, structuralType, property);
            }

            foreach ( var property in typeMetadata.Properties.Where(p => p.Kind == PropertyKind.Relation) )
            {
                AddNavigationProperty(typeMetadata, structuralType, property);
            }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public string GetMetadataJsonString()
        {
            return JsonConvert.SerializeObject(_metadata);
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        private void AddDataProperty(ITypeMetadata typeMetadata, StructuralType structuralType, IPropertyMetadata property)
        {
            throw new NotImplementedException();
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        private void AddNavigationProperty(ITypeMetadata typeMetadata, StructuralType structuralType, IPropertyMetadata property)
        {
            throw new NotImplementedException();
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public class MetadataRoot
        {
            public string MetadataVersion { get; set; }
            public string NamingConvention { get; set; }
            public string LocalQueryComparisonOptions { get; set; }
            public List<DataService> DataServices { get; set; }
            public List<StructuralType> StructuralTypes { get; set; }
            public Dictionary<string, string> ResourceEntityTypeMap { get; set; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public class DataService
        {
            public string ServiceName { get; set; }
            public bool HasServerMetadata { get; set; }
            public string JsonResultsAdapter { get; set; }
            public bool UseJsonp { get; set; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public class StructuralType
        {
            public string ShortName { get; set; }
            public string Namespace { get; set; }
            public bool IsComplexType { get; set; }
            public List<DataProperty> DataProperties { get; set; }
            public string AutoGeneratedKeyType { get; set; }
            public string DefaultResourceName { get; set; }
            public List<NavigationProperty> NavigationProperties { get; set; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public class DataProperty
        {
            public string Name { get; set; }
            public string DataType { get; set; }
            public int MaxLength { get; set; }
            public List<Validator> Validators { get; set; }
            public bool IsNullable { get; set; }
            public object DefaultValue { get; set; }
            public bool IsPartOfKey { get; set; }
            public string ComplexTypeName { get; set; }
            public string ConcurrencyMode { get; set; }
            public string RawTypeName { get; set; }
            public string EnumType { get; set; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public class NavigationProperty
        {
            public string Name { get; set; }
            public string EntityTypeName { get; set; }
            public bool IsScalar { get; set; }
            public string AssociationName { get; set; }
            public List<string> InvForeignKeyNames { get; set; }
            public List<string> ForeignKeyNames { get; set; }
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public class Validator
        {
            public int MaxLength { get; set; }
            public string Name { get; set; }
            public int? Min { get; set; }
            public long? Max { get; set; }
        }
    }
}
