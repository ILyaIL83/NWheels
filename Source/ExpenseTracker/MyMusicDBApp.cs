using System;
using System.Collections.Generic;
using NWheels.Api.Ddd;
using NWheels.Api.Uidl;
using NWheels.Api.Uidl.Toolbox;
using NWheels.Domains.InformationSecurity.Identity.UI;
using NWheels.Domains.DevOps.Logging.UI;

namespace MyMusicDB
{
    public class MusicDBAdminApp
    {
        public class MainScreen
        {
            public void Configure()
            {
                Console.Configure().Navigation(new {
                    Dashboard = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(Dashboard)),
                    MusicDB = new {
                        Genres = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(Genres)),
                        Artists = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(Artists)),
                        Albums = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(Albums)),
                        Tracks = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(Tracks)),
                    },
                    System = new {
                        UserAccounts = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(UserAccounts)),
                        SystemLog = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Console.ActiveContent.NavigateTo(SystemLog))
                    },
                    Logout = Console.Configure().MenuItem(Gallery.Icon.Dashboard, Session.Logout())
                });
            }

            public ManagementConsole<Empty.ViewModel> Console { get; set; }
            public DashboardUIPart Dashboard { get; set; }
            public CrudUIPart<Genre> Genres { get; set; }
            public CrudUIPart<Artist> Artists { get; set; }
            public CrudUIPart<Album> Albums { get; set; }
            public CrudUIPart<Track> Tracks { get; set; }
            public UserAccountCrudUIPart UserAccounts { get; set; }
            public SystemLogScreen SystemLog { get; set; }
            public UISession Session { get; set; }
        }

        public class DashboardUIPart : UIPart<Empty.ViewModel>
        {

        }
    }


    [DomainModel.BoundedContext]
    public class MusicDBContext
    {
        protected virtual IEntityRepository<Genre> Genres { get; }
        protected virtual IEntityRepository<Artist> Artists { get; }
        protected virtual IEntityRepository<Album> Albums { get; }
        protected virtual IEntityRepository<Track> Tracks { get; }
    }
    
	//------------------------------------------------------------------------------------------------------------------

	[DomainModel.Entity(IsAggregateRoot = true)]
    public class Genre
    {
        [DomainModel.EntityId(AutoGenerated = true)]
        public virtual int Id { get; protected set; }

        [DomainModel.Invariant.Required, DomainModel.Invariant.Unique]
        public virtual string Name { get; set; }
		
        public class Reference : EntityReference<Genre, int> { }
    }

	//------------------------------------------------------------------------------------------------------------------
	
	[DomainModel.Entity(IsAggregateRoot = true)]
    public class Artist
    {
        [DomainModel.EntityId(AutoGenerated = true)]
        public virtual int Id { get; protected set; }

        [DomainModel.Invariant.Required, DomainModel.Invariant.Unique]
        public virtual string Name { get; set; }

        [DomainModel.Invariant.Required, DomainModel.Semantic.MultilineText]
        public virtual string Description { get; set; }

        public virtual ISet<GenreAssociation> Genres { get; }

        public class Reference : EntityReference<Artist, int> { }
    }

	//------------------------------------------------------------------------------------------------------------------
	
	[DomainModel.ValueObject]
    public class GenreAssociation
    {
        [DomainModel.Relation.AggregationParent]
        public virtual Genre.Reference Genre { get; set; }

        public virtual bool IsPrimary { get; set; }

        public virtual bool IsRecommended { get; set; }
    }


	//------------------------------------------------------------------------------------------------------------------
	
	[DomainModel.Entity(IsAggregateRoot = true)]
    public class Album
    {
        [DomainModel.EntityId(AutoGenerated = true)]
        public virtual int Id { get; protected set; }

        public virtual Artist.Reference Artist { get; set; }

        [DomainModel.Invariant.Required, DomainModel.Invariant.UniquePerParents(nameof(Artist))]
        public virtual string Name { get; set; }

        [DomainModel.Semantic.Year, DomainModel.Invariant.Past]
        public virtual int ReleaseYear { get; set; }

        [DomainModel.Invariant.Required, DomainModel.Semantic.MultilineText]
        public virtual string Description { get; set; }

        [DomainModel.Semantic.ImageUrl]
        public virtual string CoverImageUrl { get; set; }

        [DomainModel.Relation.Composition]
        public virtual IList<Track.Reference> Tracks { get; set; }

        public class Reference : EntityReference<Album, int> { }
    }


    //-----------------------------------------------------------------------------------------------------------------

	[DomainModel.Entity(IsAggregateRoot = true)]
    public class Track
    {
        [DomainModel.EntityId(AutoGenerated = true)]
        public virtual int Id { get; protected set; }

        [DomainModel.Invariant.Required, DomainModel.Invariant.UniquePerParents(nameof(Album))]
        public virtual string Name { get; set; }

        [DomainModel.Relation.CompositionParent]
        public virtual Album.Reference Album { get; set; }

        [DomainModel.Invariant.Positive]
        public virtual int TrackNumber { get; set; }

        [DomainModel.Invariant.Positive]
        public virtual TimeSpan Length { get; set; }

        [DomainModel.Invariant.Required, DomainModel.Semantic.MultilineText]
        public virtual string Description { get; set; }

        [DomainModel.CalculatedValue]
        public virtual string AlbumText 
        { 
            get 
            {
                return $"{Album.Instance.Artist.Instance.Name}, {Album.Instance.Name} ({Album.Instance.ReleaseYear})"; 
            } 
        }

        public class Reference : EntityReference<Track, int> { }
    }
}
